import React, { useState, useEffect } from 'react';
import { useLocation } from 'wouter';
import { useTranslation } from 'react-i18next';
import { Button } from '@/components/ui/button';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Label } from '@/components/ui/label';
import { useToast } from '@/hooks/use-toast';
import { 
  LayoutGrid, SlidersHorizontal, Palette, Sparkles, Layers, 
  GraduationCap, Film, Heart, Camera, Bomb, Cpu, Glasses, Brain,
  Globe, ChevronDown
} from 'lucide-react';
import { 
  personaDisplayInfos, 
  getPersonaDisplayInfo, 
  getPersonaDescription, 
  getPersonaLoadingMessage,
  getCharacterName,
  getCharacterImagePath
} from '@/lib/personaUtils';

interface PhotoGenreInfo {
  detectedGenre: string;
  confidence: number;
  isRealPhoto: boolean;
  isFamousArtwork: boolean;
  reasonForClassification: string;
  properties: {
    primaryGenre: string;
    secondaryGenre: string;
    keywords: string[];
    technicalAttributes: {
      composition: string;
      lighting: string;
      color: string;
      focus: string;
    };
  };
  canBeAnalyzed?: boolean;
}

interface UploadedPhoto {
  id: number;
  displayImagePath: string;
  base64AnalysisImage: string;
  firebaseDisplayUrl?: string;    // Firebase Storage URL
  firebaseAnalysisUrl?: string;   // Firebase Analysis URL
  s3DisplayUrl?: string;          // AWS S3 URL for display image
  s3AnalysisUrl?: string;         // AWS S3 URL for analysis image
  replitDisplayUrl?: string;      // Replit Object Storage URL for display image
  replitAnalysisUrl?: string;     // Replit Object Storage URL for analysis image
  base64DisplayImage?: string;    // Optional base64 for display image as fallback
  originalFilename?: string;
  photoGenreInfo?: PhotoGenreInfo; // 이미지 종류 및 분석 가능 여부 정보
  exifData?: {
    dimensions?: { width?: number; height?: number };
    format?: string;
    colorSpace?: string;
    channels?: number;
    hasAlpha?: boolean;
    hasProfile?: boolean;
    exif?: any;
    cameraInfo?: string;
    exifSummary?: string;
  };
}

const OptionsPage: React.FC = () => {
  const { t, i18n } = useTranslation();
  const [, navigate] = useLocation();
  const { toast } = useToast();
  
  const [photo, setPhoto] = useState<UploadedPhoto | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  // Analysis options - load from sessionStorage if available
  const getStoredOption = (key: string, defaultValue: string) => {
    try {
      const storedOptions = sessionStorage.getItem('analysisOptions');
      if (storedOptions) {
        const options = JSON.parse(storedOptions);
        return options[key] || defaultValue;
      }
    } catch (error) {
      console.error('Failed to parse stored options:', error);
    }
    return defaultValue;
  };
  
  const [focusPoint, setFocusPoint] = useState(getStoredOption('focusPoint', 'balanced'));
  const [persona, setPersona] = useState(getStoredOption('persona', 'supportive-friend')); // Default to supportive-friend persona
  const [language, setLanguage] = useState(getStoredOption('language', i18n.language || 'en'));
  
  // Load photo data from session storage
  useEffect(() => {
    const storedPhoto = sessionStorage.getItem('uploadedPhoto');
    
    if (!storedPhoto) {
      toast({
        title: t('options.errors.noPhoto'),
        description: t('options.errors.pleaseUpload'),
        variant: 'destructive',
      });
      navigate('/upload');
      return;
    }
    
    try {
      const parsedPhoto = JSON.parse(storedPhoto);
      
      // 이미지 종류 확인 및 분석 가능 여부 체크
      if (parsedPhoto.photoGenreInfo) {
        console.log("이미지 장르 정보 확인:", parsedPhoto.photoGenreInfo);
        
        // 실제 사진이 아니거나 유명 작품인 경우 분석 불가
        if (!parsedPhoto.photoGenreInfo.isRealPhoto || parsedPhoto.photoGenreInfo.isFamousArtwork) {
          console.log("분석 불가능한 이미지:", 
            !parsedPhoto.photoGenreInfo.isRealPhoto ? "실제 사진이 아님" : "유명 작품임");
          
          // 확인 메시지와 함께 업로드 페이지로 리디렉션
          toast({
            title: t('options.errors.cannotAnalyze'),
            description: parsedPhoto.photoGenreInfo.reasonForClassification || 
              t('options.errors.notRealPhoto'),
            variant: 'destructive',
          });
          
          // 잠시 후 업로드 페이지로 이동
          setTimeout(() => {
            navigate('/upload');
          }, 2500);
          return;
        }
      }
      
      setPhoto(parsedPhoto);
    } catch (error: any) {
      console.error('Failed to parse stored photo:', error);
      toast({
        title: t('options.errors.invalidData'),
        description: t('options.errors.pleaseUpload'),
        variant: 'destructive',
      });
      navigate('/upload');
    }
  }, [navigate, toast, t]);
  
  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!photo) {
      toast({
        title: t('options.errors.noPhoto'),
        description: t('options.errors.pleaseUpload'),
        variant: 'destructive',
      });
      navigate('/upload');
      return;
    }
    
    try {
      setIsSubmitting(true);
      
      // Store analysis options in session storage
      sessionStorage.setItem('analysisOptions', JSON.stringify({
        focusPoint,
        persona,
        detailLevel: 'detailed', // Always use detailed analysis
        language
      }));
      
      // Navigate to loading page
      navigate('/analyzing');
      
    } catch (error: any) {
      console.error('Options submission failed:', error);
      toast({
        title: t('options.errors.submissionFailed'),
        description: error.message || t('options.errors.tryAgain'),
        variant: 'destructive',
      });
      setIsSubmitting(false);
    }
  };
  
  if (!photo) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="py-16 text-center">{t('options.loading')}</div>
      </div>
    );
  }
  
  return (
    <section className="pt-24 pb-12 bg-gradient-to-b from-slate-50 to-white min-h-screen">
      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        <div className="max-w-4xl mx-auto">
          {/* Header */}
          <div className="text-center mb-8">
            <h2 className="text-3xl font-bold text-slate-900 mb-2">{t('options.title')}</h2>
            <p className="text-slate-600 max-w-2xl mx-auto">{t('options.subtitle')}</p>
          </div>
          
          <div className="bg-white rounded-xl shadow-md overflow-hidden">
            {/* Photo Preview */}
            <div className="w-full bg-slate-900 relative aspect-[16/9] max-h-[300px]">
              <img 
                src={
                  photo.firebaseDisplayUrl || 
                  photo.base64DisplayImage || 
                  (photo.displayImagePath ? 
                    photo.displayImagePath.startsWith('http') ? 
                      photo.displayImagePath : 
                      `${window.location.origin}${photo.displayImagePath.startsWith('/') ? '' : '/'}${photo.displayImagePath}` 
                    : undefined)
                } 
                alt={t('options.photoToAnalyze')} 
                className="w-full h-full object-cover"
                onError={(e) => {
                  const target = e.target as HTMLImageElement;
                  console.log("이미지 로드 실패:", target.src);
                  
                  // 폴백 메커니즘
                  if (target.src === photo.firebaseDisplayUrl && photo.base64DisplayImage) {
                    console.log("Firebase URL 로드 실패, base64 이미지로 대체");
                    target.src = photo.base64DisplayImage;
                  }
                  else if (target.src === photo.base64DisplayImage && photo.displayImagePath) {
                    console.log("base64 이미지 로드 실패, 로컬 경로로 시도");
                    const host = window.location.origin;
                    const path = photo.displayImagePath.startsWith('/') 
                      ? photo.displayImagePath 
                      : `/${photo.displayImagePath}`;
                    target.src = `${host}${path}`;
                  }
                  else {
                    console.log("모든 이미지 소스 로드 실패, 플레이스홀더 사용");
                    target.src = "https://placehold.co/600x400/e2e8f0/64748b?text=Image+unavailable";
                  }
                }}
              />
              <div className="absolute inset-0 bg-gradient-to-t from-black/90 via-black/60 to-transparent">
                <div className="absolute bottom-0 left-0 right-0 p-5">
                  <div className="flex flex-col gap-1">
                    <h3 className="text-white font-bold text-xl">{t('options.photoToAnalyze')}</h3>
                    <p className="text-white/80 text-sm">{photo.originalFilename || t('options.readyForAnalysis')}</p>
                    
                    {/* 장르 및 키워드 태그 표시 */}
                    {photo.photoGenreInfo && (
                      <div className="mt-3">
                        {/* 메인 장르 태그 */}
                        <div className="flex flex-wrap gap-2 mb-2">
                          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary/80 text-white">
                            {photo.photoGenreInfo.detectedGenre}
                          </span>
                          
                          {photo.photoGenreInfo.properties.primaryGenre !== photo.photoGenreInfo.detectedGenre && (
                            <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary/60 text-white">
                              {photo.photoGenreInfo.properties.primaryGenre}
                            </span>
                          )}
                          
                          {photo.photoGenreInfo.properties.secondaryGenre && (
                            <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-indigo-500/60 text-white">
                              {photo.photoGenreInfo.properties.secondaryGenre}
                            </span>
                          )}
                        </div>
                        
                        {/* 키워드 태그 */}
                        <div className="flex flex-wrap gap-1">
                          {photo.photoGenreInfo.properties.keywords.map((keyword, index) => (
                            <span 
                              key={index} 
                              className="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-white/20 text-white"
                            >
                              {keyword}
                            </span>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
            
            {/* Options Form */}
            <div className="p-6 md:p-8">
              <div className="mb-6">
                <p className="text-slate-600 max-w-xl mx-auto text-center">{t('options.description')}</p>
              </div>
              
              <form onSubmit={handleSubmit} className="space-y-6">
                {/* Persona Selection with Character Cards */}
                <div className="bg-slate-50 p-4 rounded-lg border border-slate-100">
                  <div className="flex items-center mb-2">
                    <GraduationCap className="w-5 h-5 text-primary mr-2" />
                    <h3 className="text-sm font-medium text-primary">{t('options.persona.title', '오늘은 어떤 스타일로 피드백 받고 싶나요?')}</h3>
                  </div>
                  <p className="text-xs text-slate-500 mb-2">{t('options.persona.description', '성격별 AI 평론가를 선택하세요. 기분에 따라 달라지는 평가를 경험해보세요.')}</p>
                  
                  {/* Random button */}
                  <div className="flex justify-center my-3">
                    <button 
                      type="button"
                      onClick={() => {
                        const personas = ["brutal-critic", "film-bro", "supportive-friend", "insta-snob", "tiktok-chaos", "tech-nerd", "weeb-sensei", "art-school-dropout"];
                        const randomPersona = personas[Math.floor(Math.random() * personas.length)];
                        setPersona(randomPersona);
                      }}
                      className="flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-indigo-400 to-purple-500 text-white rounded-full text-sm font-medium hover:from-indigo-500 hover:to-purple-600 transition-all transform hover:scale-105 shadow-md"
                    >
                      <span className="animate-pulse text-lg">🤯</span>
                      <span>{t('options.persona.random', '아무나 골라줘')}</span>
                    </button>
                  </div>
                  
                  <RadioGroup 
                    value={persona} 
                    onValueChange={setPersona}
                    className="grid grid-cols-2 md:grid-cols-2 lg:grid-cols-3 gap-3 mt-2"
                  >
                    {/* Character Cards - 모든 페르소나 */}
                    {personaDisplayInfos.map((personaInfo) => (
                      <div className="relative" key={personaInfo.key}>
                        <RadioGroupItem 
                          value={personaInfo.key} 
                          id={`persona-${personaInfo.key}`} 
                          className="peer sr-only" 
                        />
                        <Label 
                          htmlFor={`persona-${personaInfo.key}`}
                          className="flex flex-col items-center justify-between p-4 text-sm bg-white border-2 border-slate-200 rounded-lg cursor-pointer peer-data-[state=checked]:bg-primary/5 peer-data-[state=checked]:border-primary peer-data-[state=checked]:text-primary peer-data-[state=checked]:shadow-[0_0_10px_rgba(0,0,0,0.1)] peer-data-[state=checked]:scale-[1.03] hover:bg-slate-50 transition-all h-full"
                        >
                          {/* Character image */}
                          <div className="w-20 h-20 mb-2 rounded-full overflow-hidden border-2 border-slate-200">
                            <img 
                              src={personaInfo.imagePath} 
                              alt={personaInfo.characterName}
                              className="w-full h-full object-cover"
                            />
                          </div>
                          
                          {/* Character name */}
                          <div className="font-bold text-center text-slate-800">{personaInfo.characterName}</div>
                          
                          {/* Persona name */}
                          <div className="font-medium text-center text-primary text-sm">{personaInfo.name}</div>
                          
                          <div className="text-xs text-center mt-1 text-slate-400">
                            {getPersonaDescription(personaInfo.key, i18n.language)}
                          </div>
                          
                          {/* Sample text */}
                          <div className="mt-3 p-2 bg-slate-50 rounded text-xs text-slate-600 w-full min-h-[60px]">
                            {i18n.language === 'en'
                              ? (
                                personaInfo.key === 'brutal-critic' ? "\"This is an amateur mistake. The composition is completely ruined.\"" :
                                personaInfo.key === 'film-bro' ? "\"Hmm... this frame reminds me of Wes Anderson's composition style.\"" :
                                personaInfo.key === 'supportive-friend' ? "\"Wow, this shot is amazing! Just a tiny tweak to the lighting would make it perfect.\"" :
                                personaInfo.key === 'insta-snob' ? "\"This filter+composition will get you likes! #aesthetic #moody\"" :
                                personaInfo.key === 'tiktok-chaos' ? "\"OMG this composition is FIRE!!! Colors totally SLAY!!! But lighting is OMG...\"" :
                                personaInfo.key === 'tech-nerd' ? "\"Shot at ISO 1600, f/2.8, with a shutter speed of 1/160 second.\"" :
                                personaInfo.key === 'weeb-sensei' ? "\"Your composition evokes the spiritual emptiness of mono no aware... Beautiful.\"" :
                                "\"The juxtaposition creates a Derridean tension between presence and absence...\""
                              )
                              : (
                                personaInfo.key === 'brutal-critic' ? "\"아마추어 같은 실수입니다. 구도가 완전히 망가졌어요.\"" :
                                personaInfo.key === 'film-bro' ? "\"이건 완전 타르코프스키의 '스토커' 미장센이네요.\"" :
                                personaInfo.key === 'supportive-friend' ? "\"와, 정말 잘 찍었어! 조명만 살짝 바꿔보면 더 좋을 것 같아.\"" :
                                personaInfo.key === 'insta-snob' ? "\"이 필터+구도는 팔로워들이 좋아해요! #감성사진 #무드\"" :
                                personaInfo.key === 'tiktok-chaos' ? "\"OMG 이 구도 미쳤다고!!! 색감 진짜 SLAY!!! 근데 조명은 OMG...\"" :
                                personaInfo.key === 'tech-nerd' ? "\"ISO 1600에 f/2.8, 셔터스피드는 1/160초로 찍었군요.\"" :
                                personaInfo.key === 'weeb-sensei' ? "\"이 사진에서 일본의 '와비사비' 미학이 느껴지네요... 素晴らしい!\"" :
                                "\"이 공간적 배치는 현존과 부재 사이의 데리다적 긴장감을 형성하고 있습니다...\""
                              )
                            }
                          </div>
                        </Label>
                        {persona === personaInfo.key && (
                          <div className="absolute top-1 right-1 bg-primary text-white rounded-full p-1 text-xs animate-pulse">
                            ✓
                          </div>
                        )}
                      </div>
                    ))}
                  </RadioGroup>
                  
                  {/* Selection effect indicator */}
                  {persona && (
                    <div className="mt-4 p-2 bg-primary/10 border border-primary/20 rounded-md text-sm text-center animate-fade-in">
                      <span className="font-medium">
                        {getPersonaDisplayInfo(persona).emoji} {getPersonaLoadingMessage(persona, i18n.language)}
                      </span>
                    </div>
                  )}
                </div>
                
                {/* Language */}
                <div className="bg-slate-50 p-4 rounded-lg border border-slate-100">
                  <div className="flex items-center mb-2">
                    <Globe className="w-5 h-5 text-primary mr-2" />
                    <h3 className="text-sm font-medium text-primary">{t('options.language.title')}</h3>
                  </div>
                  <p className="text-xs text-slate-500 mb-3">
                    <span className="font-medium text-primary">{t('options.language.feedbackOnly', 'This only affects the language of your photo analysis results')}</span>, 
                    {t('options.language.uiSeparate', 'not the interface language.')}
                    {t('options.language.supportedCount', 'We support 14 languages for analysis results.')}
                  </p>
                  
                  <RadioGroup value={language} onValueChange={setLanguage} className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-3">
                    <div className="relative">
                      <RadioGroupItem value="en" id="language-en" className="peer sr-only" />
                      <Label htmlFor="language-en" className="flex items-center gap-2 p-3 text-sm bg-white border-2 border-slate-200 rounded-lg cursor-pointer peer-data-[state=checked]:bg-primary/5 peer-data-[state=checked]:border-primary peer-data-[state=checked]:text-primary hover:bg-slate-50 transition-all">
                        <span className="text-lg">🇺🇸</span> English
                      </Label>
                      {language === 'en' && (
                        <div className="absolute top-1 right-1 bg-primary text-white rounded-full p-1 text-xs animate-pulse">
                          ✓
                        </div>
                      )}
                    </div>
                    
                    <div className="relative">
                      <RadioGroupItem value="ko" id="language-ko" className="peer sr-only" />
                      <Label htmlFor="language-ko" className="flex items-center gap-2 p-3 text-sm bg-white border-2 border-slate-200 rounded-lg cursor-pointer peer-data-[state=checked]:bg-primary/5 peer-data-[state=checked]:border-primary peer-data-[state=checked]:text-primary hover:bg-slate-50 transition-all">
                        <span className="text-lg">🇰🇷</span> 한국어
                      </Label>
                      {language === 'ko' && (
                        <div className="absolute top-1 right-1 bg-primary text-white rounded-full p-1 text-xs animate-pulse">
                          ✓
                        </div>
                      )}
                    </div>
                    
                    <div className="relative">
                      <RadioGroupItem value="ja" id="language-ja" className="peer sr-only" />
                      <Label htmlFor="language-ja" className="flex items-center gap-2 p-3 text-sm bg-white border-2 border-slate-200 rounded-lg cursor-pointer peer-data-[state=checked]:bg-primary/5 peer-data-[state=checked]:border-primary peer-data-[state=checked]:text-primary hover:bg-slate-50 transition-all">
                        <span className="text-lg">🇯🇵</span> 日本語
                      </Label>
                      {language === 'ja' && (
                        <div className="absolute top-1 right-1 bg-primary text-white rounded-full p-1 text-xs animate-pulse">
                          ✓
                        </div>
                      )}
                    </div>
                    
                    <div className="relative">
                      <RadioGroupItem value="zh" id="language-zh" className="peer sr-only" />
                      <Label htmlFor="language-zh" className="flex items-center gap-2 p-3 text-sm bg-white border-2 border-slate-200 rounded-lg cursor-pointer peer-data-[state=checked]:bg-primary/5 peer-data-[state=checked]:border-primary peer-data-[state=checked]:text-primary hover:bg-slate-50 transition-all">
                        <span className="text-lg">🇨🇳</span> 中文
                      </Label>
                      {language === 'zh' && (
                        <div className="absolute top-1 right-1 bg-primary text-white rounded-full p-1 text-xs animate-pulse">
                          ✓
                        </div>
                      )}
                    </div>
                    
                    <div className="relative">
                      <RadioGroupItem value="es" id="language-es" className="peer sr-only" />
                      <Label htmlFor="language-es" className="flex items-center gap-2 p-3 text-sm bg-white border-2 border-slate-200 rounded-lg cursor-pointer peer-data-[state=checked]:bg-primary/5 peer-data-[state=checked]:border-primary peer-data-[state=checked]:text-primary hover:bg-slate-50 transition-all">
                        <span className="text-lg">🇪🇸</span> Español
                      </Label>
                      {language === 'es' && (
                        <div className="absolute top-1 right-1 bg-primary text-white rounded-full p-1 text-xs animate-pulse">
                          ✓
                        </div>
                      )}
                    </div>
                    
                    <div className="relative">
                      <RadioGroupItem value="fr" id="language-fr" className="peer sr-only" />
                      <Label htmlFor="language-fr" className="flex items-center gap-2 p-3 text-sm bg-white border-2 border-slate-200 rounded-lg cursor-pointer peer-data-[state=checked]:bg-primary/5 peer-data-[state=checked]:border-primary peer-data-[state=checked]:text-primary hover:bg-slate-50 transition-all">
                        <span className="text-lg">🇫🇷</span> Français
                      </Label>
                      {language === 'fr' && (
                        <div className="absolute top-1 right-1 bg-primary text-white rounded-full p-1 text-xs animate-pulse">
                          ✓
                        </div>
                      )}
                    </div>
                  </RadioGroup>
                </div>
                
                {/* Submit Button */}
                <div className="flex justify-center">
                  <Button
                    type="submit"
                    className="w-full max-w-sm py-6 text-lg"
                    disabled={isSubmitting}
                  >
                    {isSubmitting ? (
                      <span className="flex items-center">
                        <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        {t('options.analyzing')}
                      </span>
                    ) : (
                      <span className="flex items-center">
                        <Sparkles className="mr-2 h-5 w-5" /> 
                        {t('options.analyzePhoto')}
                      </span>
                    )}
                  </Button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default OptionsPage;