// format.ts - 포맷팅 및 프롬프트 생성 유틸리티

import { generatePersonaPrompt } from "./personas";
import { PhotoGenreDetectionResult } from "./types";
import { buildPersonaPrompt, generateTranslationPrompt } from "./personaPromptTemplate";

/**
 * 시스템 프롬프트 생성 함수 - 영어로 프롬프트 생성하고 결과만 원하는 언어로 받음
 * 장르 기반에서 페르소나 기반으로 변경
 */
export function createSystemPrompt(
  personaKey: string,
  genreSummary: string | null,
  language: string = "ko",
): string {
  const persona = generatePersonaPrompt(personaKey);
  // personaPromptTemplate 모듈의 buildPersonaPrompt 함수 사용
  const prompt = buildPersonaPrompt(persona, personaKey, genreSummary, language);
  return prompt;
}

/**
 * JSON 응답 추출 함수
 */
export function extractJson(text: string): string {
  try {
    // 1. 우선 전체 텍스트가 유효한 JSON인지 확인
    try {
      JSON.parse(text);
      return text.trim();
    } catch (e) {
      // JSON이 아닌 경우 계속 진행
    }

    // 2. JSON 코드 블록 찾기 (가장 일반적인 패턴)
    const jsonMatch = text.match(/```(?:json)?\s*([\s\S]*?)\s*```/);
    if (jsonMatch && jsonMatch[1]) {
      const jsonText = jsonMatch[1].trim();
      // 유효성 검사
      JSON.parse(jsonText);
      return jsonText;
    }

    // 3. 중괄호로 둘러싸인 텍스트 찾기
    const braceMatch = text.match(/(\{[\s\S]*\})/);
    if (braceMatch && braceMatch[1]) {
      const jsonText = braceMatch[1].trim();
      // 유효성 검사
      JSON.parse(jsonText);
      return jsonText;
    }

    // 모든 시도가 실패하면 원본 반환
    return text;
  } catch (error) {
    // 모든 파싱 시도가 실패한 경우
    console.error("JSON 파싱 실패:", error);
    return text;
  }
}

/**
 * 장르 정보 요약 함수
 */
export function summarizeGenre(
  info?: PhotoGenreDetectionResult | null,
): string | null {
  if (!info) return null;

  const primaryGenre =
    info.properties?.primaryGenre || info.detectedGenre || "Unknown";
  const secondaryGenre = info.properties?.secondaryGenre || "N/A";

  // 장르 신뢰도 점수 문자열로 변환 (가독성 위해)
  const confidence =
    typeof info.confidence === "number"
      ? `${Math.round(info.confidence * 100)}%`
      : info.confidence || "N/A";

  // 키워드가 있는 경우 포함
  const keywords = info.properties?.keywords?.length
    ? `\nKeywords: ${info.properties.keywords.join(", ")}`
    : "";

  // 분석 이유가 있는 경우 포함
  const reason = info.reasonForClassification
    ? `\nClassification basis: ${info.reasonForClassification}`
    : "";

  // 기술적 특성이 있는 경우 포함
  const technicalDetails = info.properties?.technicalAttributes
    ? `
Technical characteristics:
- Composition: ${info.properties.technicalAttributes.composition || "N/A"}
- Lighting: ${info.properties.technicalAttributes.lighting || "N/A"}
- Color: ${info.properties.technicalAttributes.color || "N/A"}
- Focus: ${info.properties.technicalAttributes.focus || "N/A"}`
    : "";

  // 최종 요약
  return `
Primary genre: ${primaryGenre}
Secondary genre: ${secondaryGenre}
Confidence: ${confidence}${keywords}${reason}${technicalDetails}
  `.trim();
}

/**
 * 사진 평가 결과 포맷팅 함수
 * @param jsonResponse AI로부터 받은 JSON 응답
 * @param language 원하는 결과 언어
 * @param genreSummary 장르 요약 정보
 * @returns 포맷팅된 평가 결과
 */
export function formatEvaluationResult(
  jsonResponse: string,
  language: string = "ko",
  genreSummary: string | null = null,
): string {
  try {
    // JSON 파싱
    const data = JSON.parse(jsonResponse);

    // 언어별 레이블 정의
    const labels = {
      ko: {
        title: "사진 평가 보고서",
        genre: "감지된 장르",
        summary: "요약",
        overallScore: "총점",
        tags: "태그",
        categoryScores: "카테고리별 점수",
        composition: "구도",
        lighting: "조명",
        color: "색상",
        focus: "초점",
        creativity: "창의성",
        analysis: "분석",
        overall: "전체 평가",
        strengths: "강점",
        improvements: "개선점",
        modifications: "수정 제안",
        suggestions: "제안",
        personalTake: "개인적인 견해",
        techniqueSuggestions: "추천 기술",
        language: "언어",
        originalLanguage: "원본 언어",
        targetLanguage: "대상 언어",
        translated: "번역됨"
      },
      en: {
        title: "Photo Evaluation Report",
        genre: "Detected Genre",
        summary: "Summary",
        overallScore: "Overall Score",
        tags: "Tags",
        categoryScores: "Category Scores",
        composition: "Composition",
        lighting: "Lighting",
        color: "Color",
        focus: "Focus",
        creativity: "Creativity",
        analysis: "Analysis",
        overall: "Overall Assessment",
        strengths: "Strengths",
        improvements: "Areas for Improvement",
        modifications: "Modification Suggestions",
        suggestions: "Suggestions",
        personalTake: "Personal Take",
        techniqueSuggestions: "Recommended Techniques",
        language: "Language",
        originalLanguage: "Original Language",
        targetLanguage: "Target Language",
        translated: "Translated"
      },
      // 추가 언어 지원 가능
    };

    // 기본 언어 설정
    const l = labels[language as keyof typeof labels] || labels.en;

    // 결과 포맷팅
    let result = `# ${l.title}: ${data.detectedGenre}\n\n`;

    // 요약 및 점수
    result += `## ${l.summary}\n${data.summary}\n\n`;
    result += `**${l.overallScore}:** ${data.overallScore}/100\n\n`;

    // 태그
    if (data.tags && data.tags.length) {
      result += `**${l.tags}:** ${data.tags.join(", ")}\n\n`;
    }

    // 언어 정보 (있는 경우)
    if (data.metadata) {
      result += `**${l.language}:** ${data.metadata.targetLanguage} `;
      if (data.metadata.translated) {
        result += `(${l.translated} ${l.originalLanguage}: ${data.metadata.originalLanguage})\n\n`;
      } else {
        result += "\n\n";
      }
    }

    // 카테고리별 점수
    result += `## ${l.categoryScores}\n`;
    for (const [category, score] of Object.entries(data.categoryScores || {})) {
      const categoryLabel = l[category as keyof typeof l] || category;
      result += `- **${categoryLabel}:** ${score}/100\n`;
    }
    result += "\n";

    // 전체 분석
    result += `## ${l.overall}\n${data.analysis.overall.text}\n\n`;

    // 강점
    result += `### ${l.strengths}\n`;
    data.analysis.overall.strengths.forEach(
      (strength: string, index: number) => {
        result += `${index + 1}. ${strength}\n`;
      },
    );
    result += "\n";

    // 개선점
    result += `### ${l.improvements}\n`;
    data.analysis.overall.improvements.forEach(
      (improvement: string, index: number) => {
        result += `${index + 1}. ${improvement}\n`;
      },
    );
    result += "\n";

    // 수정 제안 (배열 확인 및 적절한 포맷팅)
    result += `### ${l.modifications}\n`;
    // modifications가 배열인 경우 번호가 매겨진 목록으로 표시
    if (Array.isArray(data.analysis.overall.modifications)) {
      data.analysis.overall.modifications.forEach(
        (modification: string, index: number) => {
          result += `${index + 1}. ${modification}\n`;
        },
      );
    } else {
      // 문자열인 경우 그대로 출력 (기존 데이터 호환성)
      result += `${data.analysis.overall.modifications}\n`;
    }
    result += "\n";

    // 상세 카테고리별 분석
    for (const category of [
      "composition",
      "lighting",
      "color",
      "focus",
      "creativity",
    ]) {
      if (data.analysis[category]) {
        const categoryLabel = l[category as keyof typeof l] || category;
        result += `## ${categoryLabel}\n${data.analysis[category].text}\n\n`;
        result += `**${l.suggestions}:** ${data.analysis[category].suggestions || "No specific suggestions provided."}\n\n`;
      }
    }

    // 페르소나 개인적 견해 추가
    if (data.analysis.personalTake) {
      result += `## ${l.personalTake}\n${data.analysis.personalTake.text}\n\n`;
    }

    // 추천 기술
    if (data.techniqueSuggestions && data.techniqueSuggestions.length) {
      result += `## ${l.techniqueSuggestions}\n`;
      data.techniqueSuggestions.forEach((technique: string, index: number) => {
        result += `${index + 1}. ${technique}\n`;
      });
    }

    return result;
  } catch (error) {
    console.error("결과 포맷팅 오류:", error);
    return jsonResponse; // 오류 시 원본 반환
  }
}

/**
 * 영어 분석 결과를 대상 언어로 번역하기 위한 함수
 * @param jsonResponse 영어로 된 JSON 응답
 * @param targetLanguage 대상 언어
 * @param personaKey 페르소나 키
 */
export async function translateEvaluationResult(
  jsonResponse: string,
  targetLanguage: string,
  personaKey: string,
  translateFn: (prompt: string) => Promise<string>
): Promise<string> {
  try {
    // JSON 파싱
    const data = JSON.parse(jsonResponse);
    
    // 이미 번역되어 있거나 대상 언어가 영어인 경우 번역하지 않음
    if (
      (data.metadata && data.metadata.translated) || 
      targetLanguage.toLowerCase() === 'en' ||
      targetLanguage.toLowerCase() === 'english'
    ) {
      return jsonResponse;
    }
    
    // 번역할 필드 목록
    const fieldsToTranslate = [
      { path: "summary", value: data.summary },
      { path: "analysis.overall.text", value: data.analysis.overall.text },
    ];
    
    // strengths, improvements, modifications 배열 항목 추가
    if (Array.isArray(data.analysis.overall.strengths)) {
      data.analysis.overall.strengths.forEach((text: string, index: number) => {
        fieldsToTranslate.push({ 
          path: `analysis.overall.strengths[${index}]`, 
          value: text 
        });
      });
    }
    
    if (Array.isArray(data.analysis.overall.improvements)) {
      data.analysis.overall.improvements.forEach((text: string, index: number) => {
        fieldsToTranslate.push({ 
          path: `analysis.overall.improvements[${index}]`, 
          value: text 
        });
      });
    }
    
    if (Array.isArray(data.analysis.overall.modifications)) {
      data.analysis.overall.modifications.forEach((text: string, index: number) => {
        fieldsToTranslate.push({ 
          path: `analysis.overall.modifications[${index}]`, 
          value: text 
        });
      });
    }
    
    // 카테고리별 텍스트 추가
    ["composition", "lighting", "color", "focus", "creativity"].forEach(category => {
      if (data.analysis[category] && data.analysis[category].text) {
        fieldsToTranslate.push({ 
          path: `analysis.${category}.text`, 
          value: data.analysis[category].text 
        });
      }
    });
    
    // personalTake가 있는 경우 추가
    if (data.analysis.personalTake && data.analysis.personalTake.text) {
      fieldsToTranslate.push({ 
        path: `analysis.personalTake.text`, 
        value: data.analysis.personalTake.text 
      });
    }
    
    // 각 필드 번역
    for (const field of fieldsToTranslate) {
      // 번역 프롬프트 생성
      const translationPrompt = generateTranslationPrompt(
        field.value,
        targetLanguage,
        personaKey
      );
      
      // 번역 실행
      const translatedText = await translateFn(translationPrompt);
      
      // 번역된 텍스트를 객체에 적용
      // 경로 파싱 (예: "analysis.overall.strengths[0]")
      const pathParts = field.path.split('.');
      let current = data;
      
      for (let i = 0; i < pathParts.length; i++) {
        const part = pathParts[i];
        
        // 배열 인덱스 처리 (예: "strengths[0]")
        if (part.includes('[')) {
          const arrName = part.substring(0, part.indexOf('['));
          const index = parseInt(part.substring(part.indexOf('[') + 1, part.indexOf(']')));
          
          if (i === pathParts.length - 1) {
            // 마지막 경로 부분이면 값 설정
            current[arrName][index] = translatedText;
          } else {
            current = current[arrName][index];
          }
        } else {
          if (i === pathParts.length - 1) {
            // 마지막 경로 부분이면 값 설정
            current[part] = translatedText;
          } else {
            current = current[part];
          }
        }
      }
    }
    
    // 메타데이터 업데이트
    data.metadata = {
      originalLanguage: "en",
      targetLanguage: targetLanguage,
      translated: true
    };
    
    return JSON.stringify(data, null, 2);
  } catch (error) {
    console.error("번역 오류:", error);
    return jsonResponse; // 오류 시 원본 반환
  }
}